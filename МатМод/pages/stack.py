import streamlit as st
import pandas as pd
import os
import datetime

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
st.set_page_config(page_title="FireWatch", page_icon="üî•", layout="wide")

# –ü–æ–¥–∫–ª—é—á–∞–µ–º —Å—Ç–∏–ª–∏
style_path = os.path.join(os.path.dirname(__file__), "..", "styles.css")
with open(style_path, encoding="utf-8") as f:
    st.markdown(f"<style>{f.read()}</style>", unsafe_allow_html=True)

# –®–∞–ø–∫–∞ —Å–∞–π—Ç–∞
def header():
    st.markdown("""
    <div class="site-header">
        <div class="logo">üî• FireWatch</div>
        <div class="nav">
            <a class="nav-item" href="/">–ì–ª–∞–≤–Ω–∞—è</a>
            <a class="nav-item active" href="/stack">–®—Ç–∞–±–µ–ª–∏</a>
            <a class="nav-item" href="/warehouse">–°–∫–ª–∞–¥—ã</a>
            <a class="nav-item" href="/shipments">–í—ã–≥—Ä—É–∑–∫–∏ –∏ –æ—Ç–≥—Ä—É–∑–∫–∏</a>
            <a class="nav-item" href="/location">–ú–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ</a>
            <a class="nav-item" href="#">–û—Ç—á—ë—Ç—ã</a>
            <a class="nav-item" href="/help">–°–ø—Ä–∞–≤–∫–∞</a>
        </div>
    </div>
    """, unsafe_allow_html=True)

header()

# –ó–∞–≥–ª—É—à–∫–∞ –¥–ª—è –¥–∞–Ω–Ω—ã—Ö —à—Ç–∞–±–µ–ª–µ–π
def get_shabels_data():
    # –ò–º–∏—Ç–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ, –∫–æ—Ç–æ—Ä—ã–µ –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
    shabel_data = [
        {"ID": 1, "–ù–∞–∑–≤–∞–Ω–∏–µ": "–®—Ç–∞–±–µ–ª—å 1", "–°—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω": "2023-04-01", "–ë–ª–∏–∂–∞–π—à–µ–µ –≤–æ–∑–≥–æ—Ä–∞–Ω–∏–µ": "2023-05-10",
         "–ú–∞–∫—Å. —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞": "450¬∞C", "–°–∫–ª–∞–¥": 5},
        {"ID": 2, "–ù–∞–∑–≤–∞–Ω–∏–µ": "–®—Ç–∞–±–µ–ª—å 5774", "–°—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω": "2023-04-15", "–ë–ª–∏–∂–∞–π—à–µ–µ –≤–æ–∑–≥–æ—Ä–∞–Ω–∏–µ": "2023-06-20",
         "–ú–∞–∫—Å. —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞": "500¬∞C", "–°–∫–ª–∞–¥": 4},
        {"ID": 3, "–ù–∞–∑–≤–∞–Ω–∏–µ": "–®—Ç–∞–±–µ–ª—å 3", "–°—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω": "2023-05-01", "–ë–ª–∏–∂–∞–π—à–µ–µ –≤–æ–∑–≥–æ—Ä–∞–Ω–∏–µ": "2023-07-30",
         "–ú–∞–∫—Å. —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞": "480¬∞C", "–°–∫–ª–∞–¥": 2},
        {"ID": 4, "–ù–∞–∑–≤–∞–Ω–∏–µ": "–®—Ç–∞–±–µ–ª—å 4", "–°—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω": "2023-06-05", "–ë–ª–∏–∂–∞–π—à–µ–µ –≤–æ–∑–≥–æ—Ä–∞–Ω–∏–µ": "2023-08-25",
         "–ú–∞–∫—Å. —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞": "470¬∞C", "–°–∫–ª–∞–¥": 3},
        {"ID": 5, "–ù–∞–∑–≤–∞–Ω–∏–µ": "–®—Ç–∞–±–µ–ª—å 5", "–°—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω": "2023-06-10", "–ë–ª–∏–∂–∞–π—à–µ–µ –≤–æ–∑–≥–æ—Ä–∞–Ω–∏–µ": "2023-09-12",
         "–ú–∞–∫—Å. —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞": "460¬∞C", "–°–∫–ª–∞–¥": 1}
    ]

    # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º —Å–ø–∏—Å–æ–∫ –≤ DataFrame
    return pd.DataFrame(shabel_data)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è —à—Ç–∞–±–µ–ª–µ–π
if 'stacks' not in st.session_state:
    st.session_state.stacks = get_shabels_data()

# –ó–∞–≥–æ–ª–æ–≤–æ–∫ + —Ñ–æ—Ä–º–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è
st.markdown("""
<div style="display: flex; justify-content: space-between; align-items: center; margin-top: 20px;">
    <h1>–°–ø–∏—Å–æ–∫ —à—Ç–∞–±–µ–ª–µ–π</h1>
</div>
""", unsafe_allow_html=True)

# –§–æ—Ä–º–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –Ω–æ–≤–æ–≥–æ —à—Ç–∞–±–µ–ª—è
st.markdown("""
<div style="margin: 20px 0; padding: 15px; background-color: #f8f9fa; border-radius: 8px;">
    <h3>–î–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤—ã–π —à—Ç–∞–±–µ–ª—å</h3>
</div>
""", unsafe_allow_html=True)

with st.form("new_stack_form"):
    col1, col2, col3 = st.columns(3)
    
    with col1:
        stack_name = st.text_input("–ù–æ–º–µ—Ä —à—Ç–∞–±–µ–ª—è", placeholder="–ù–∞–ø—Ä–∏–º–µ—Ä: –®—Ç–∞–±–µ–ª—å 1")
    with col2:
        stack_id = st.number_input("ID —à—Ç–∞–±–µ–ª—è", min_value=1, step=1)
    with col3:
        warehouse = st.number_input("–ù–æ–º–µ—Ä —Å–∫–ª–∞–¥–∞", min_value=1, step=1)
    
    submit_button = st.form_submit_button("–î–æ–±–∞–≤–∏—Ç—å —à—Ç–∞–±–µ–ª—å")
    
    if submit_button:
        if stack_name and stack_id and warehouse:
            # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π —à—Ç–∞–±–µ–ª—å
            new_stack = {
                "ID": stack_id,
                "–ù–∞–∑–≤–∞–Ω–∏–µ": stack_name,
                "–°—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω": datetime.datetime.now().strftime("%Y-%m-%d"),
                "–ë–ª–∏–∂–∞–π—à–µ–µ –≤–æ–∑–≥–æ—Ä–∞–Ω–∏–µ": "–ù–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–æ",
                "–ú–∞–∫—Å. —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞": "–ù–µ –∏–∑–º–µ—Ä–µ–Ω–æ",
                "–°–∫–ª–∞–¥": warehouse
            }
            
            # –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–π —à—Ç–∞–±–µ–ª—å –≤ —Å–ø–∏—Å–æ–∫
            new_df = pd.DataFrame([new_stack])
            st.session_state.stacks = pd.concat([st.session_state.stacks, new_df], ignore_index=True)
            st.success("–®—Ç–∞–±–µ–ª—å —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω!")
        else:
            st.error("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞–ø–æ–ª–Ω–∏—Ç–µ –≤—Å–µ –ø–æ–ª—è")

# –§–∏–ª—å—Ç—Ä—ã –∏ –ø–æ–∏—Å–∫
st.markdown("""
<div style="margin: 20px 0; padding: 15px; background-color: #f8f9fa; border-radius: 8px;">
    <h3>–§–∏–ª—å—Ç—Ä—ã –∏ –ø–æ–∏—Å–∫</h3>
</div>
""", unsafe_allow_html=True)

# –°–æ–∑–¥–∞–µ–º –∫–æ–ª–æ–Ω–∫–∏ –¥–ª—è —Ñ–∏–ª—å—Ç—Ä–æ–≤
col1, col2, col3 = st.columns(3)

with col1:
    search_query = st.text_input("–ü–æ–∏—Å–∫ –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é", placeholder="–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —à—Ç–∞–±–µ–ª—è")

with col2:
    id_filter = st.text_input("–§–∏–ª—å—Ç—Ä –ø–æ ID", placeholder="–í–≤–µ–¥–∏—Ç–µ ID")

with col3:
    warehouse_filter = st.text_input("–§–∏–ª—å—Ç—Ä –ø–æ —Å–∫–ª–∞–¥—É", placeholder="–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä —Å–∫–ª–∞–¥–∞")

# –ü—Ä–∏–º–µ–Ω—è–µ–º —Ñ–∏–ª—å—Ç—Ä—ã
filtered_df = st.session_state.stacks.copy()

if search_query:
    filtered_df = filtered_df[filtered_df['–ù–∞–∑–≤–∞–Ω–∏–µ'].str.contains(search_query, case=False, na=False)]

if id_filter:
    filtered_df = filtered_df[filtered_df['ID'].astype(str).str.contains(id_filter)]

if warehouse_filter:
    filtered_df = filtered_df[filtered_df['–°–∫–ª–∞–¥'].astype(str).str.contains(warehouse_filter)]

# –û—Ç–æ–±—Ä–∞–∂–∞–µ–º –æ—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω–Ω—ã–π —Å–ø–∏—Å–æ–∫ —à—Ç–∞–±–µ–ª–µ–π
st.markdown("""
<div style="margin: 20px 0; padding: 15px; background-color: #f8f9fa; border-radius: 8px;">
    <h3>–°–ø–∏—Å–æ–∫ —à—Ç–∞–±–µ–ª–µ–π</h3>
</div>
""", unsafe_allow_html=True)

for i, (_, row) in enumerate(filtered_df.iterrows(), 1):
    col1, col2 = st.columns([4, 1])
    
    with col1:
        st.markdown(f"""
        <div style="margin: 10px 0; padding: 10px; background-color: #fff; border-radius: 8px; box-shadow: 0 2px 4px rgba(0,0,0,0.1);">
            <a href="/shabel_detail?shabel_id={row['ID']}" style="text-decoration: none; color: inherit;">
                {i}. {row['–ù–∞–∑–≤–∞–Ω–∏–µ']} (id {row['ID']}). –°–∫–ª–∞–¥ {row['–°–∫–ª–∞–¥']}
            </a>
        </div>
        """, unsafe_allow_html=True)
    
    with col2:
        # –ö–Ω–æ–ø–∫–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∏ —É–¥–∞–ª–µ–Ω–∏—è
        edit_key = f"edit_{row['ID']}"
        delete_key = f"delete_{row['ID']}"
        
        col_edit, col_delete = st.columns(2)
        with col_edit:
            if st.button("‚úèÔ∏è", key=edit_key):
                st.session_state[f"editing_{row['ID']}"] = True
                st.session_state[f"edit_name_{row['ID']}"] = row['–ù–∞–∑–≤–∞–Ω–∏–µ']
                st.session_state[f"edit_warehouse_{row['ID']}"] = row['–°–∫–ª–∞–¥']
        
        with col_delete:
            if st.button("üóëÔ∏è", key=delete_key):
                st.session_state.stacks = st.session_state.stacks[st.session_state.stacks['ID'] != row['ID']]
                st.rerun()
    
    # –§–æ—Ä–º–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    if st.session_state.get(f"editing_{row['ID']}", False):
        with st.form(f"edit_form_{row['ID']}"):
            st.markdown("---")
            col1, col2 = st.columns(2)
            
            with col1:
                new_name = st.text_input("–ù–æ–º–µ—Ä —à—Ç–∞–±–µ–ª—è", 
                                       value=st.session_state.get(f"edit_name_{row['ID']}", row['–ù–∞–∑–≤–∞–Ω–∏–µ']),
                                       key=f"new_name_{row['ID']}")
            with col2:
                new_warehouse = st.number_input("–ù–æ–º–µ—Ä —Å–∫–ª–∞–¥–∞", 
                                              min_value=1, 
                                              value=st.session_state.get(f"edit_warehouse_{row['ID']}", row['–°–∫–ª–∞–¥']),
                                              key=f"new_warehouse_{row['ID']}")
            
            col1, col2 = st.columns(2)
            with col1:
                if st.form_submit_button("–°–æ—Ö—Ä–∞–Ω–∏—Ç—å"):
                    # –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ —à—Ç–∞–±–µ–ª—è
                    st.session_state.stacks.loc[st.session_state.stacks['ID'] == row['ID'], '–ù–∞–∑–≤–∞–Ω–∏–µ'] = new_name
                    st.session_state.stacks.loc[st.session_state.stacks['ID'] == row['ID'], '–°–∫–ª–∞–¥'] = new_warehouse
                    st.session_state[f"editing_{row['ID']}"] = False
                    st.rerun()
            with col2:
                if st.form_submit_button("–û—Ç–º–µ–Ω–∞"):
                    st.session_state[f"editing_{row['ID']}"] = False
                    st.rerun()

# –ö–Ω–æ–ø–∫–∞ –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è —Ç–∞–±–ª–∏—Ü—ã –≤ —Ñ–æ—Ä–º–∞—Ç–µ CSV
csv = filtered_df.to_csv(index=False)  # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º —Ç–∞–±–ª–∏—Ü—É –≤ CSV
st.download_button(
    label="–°–∫–∞—á–∞—Ç—å —Ç–∞–±–ª–∏—Ü—É —à—Ç–∞–±–µ–ª–µ–π",
    data=csv,
    file_name="stack.csv",
    mime="text/csv"
)
